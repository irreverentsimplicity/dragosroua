---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getAllPosts } from '../../lib/wordpress';
import { generateExcerpt } from '../../lib/utils';

export async function getStaticPaths({ paginate }) {
  const posts = await getAllPosts();
  
  // Sort by date, newest first
  const sortedPosts = posts.sort((a, b) => 
    new Date(b.date).getTime() - new Date(a.date).getTime()
  );
  
  return paginate(sortedPosts, {
    pageSize: 20
  });
}

const { page } = Astro.props;
---

<BaseLayout 
  title={`Blog - Page ${page.currentPage} - Dragos Roua`}
  description="All blog posts about productivity, mindfulness, and technology"
  canonical={`https://dragosroua.com/blog/${page.currentPage > 1 ? `${page.currentPage}/` : ''}`}
>
  <div class="blog-header">
    <h1>Blog</h1>
    <p class="blog-subtitle">Thoughts on productivity, mindfulness, and technology</p>
  </div>

  <div class="posts-grid">
    {page.data.map(post => (
      <article class="post-card">
        {post.featuredImage?.node?.sourceUrl && (
          <a href={post.uri} class="post-image-link">
            <img 
              src={post.featuredImage.node.sourceUrl} 
              alt={post.featuredImage.node.altText || post.title}
              class="post-image"
              loading="lazy"
            />
          </a>
        )}
        
        <div class="post-card-content">
          <h2 class="post-card-title">
            <a href={post.uri} set:html={post.title} />
          </h2>

          {/* ADD DATE BACK */}
            <time class="post-date" datetime={post.date}>
                {new Date(post.date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
                })}
            </time>
          
          {post.categories?.nodes && post.categories.nodes.length > 0 && (
            <div class="post-categories">
              <span class="category-label">Published in:</span>
              {post.categories.nodes.slice(0, 3).map((category, index) => (
                <Fragment>
                  <a href={`/category/${category.slug}/`} class="category-link">
                    {category.name}
                  </a>
                  {index < Math.min(2, post.categories.nodes.length - 1) && <span>, </span>}
                </Fragment>
              ))}
              {post.categories.nodes.length > 3 && (
                <span class="category-more"> and {post.categories.nodes.length - 3} more</span>
              )}
            </div>
          )}
          
          <p class="post-excerpt">
            {post.seo?.metaDesc ? generateExcerpt(post.seo.metaDesc, 20) : generateExcerpt(post.content, 20)}
          </p>
        </div>
      </article>
    ))}
  </div>

  <nav class="pagination" aria-label="Blog pagination">
    <div class="pagination-info">
      Showing {((page.currentPage - 1) * 20) + 1}-{Math.min(page.currentPage * 20, page.total)} of {page.total} posts
    </div>
    
    <div class="pagination-controls">
      {page.url.prev && (
        <a href={page.url.prev} class="pagination-link">
          ← Previous
        </a>
      )}
      
      <span class="pagination-current">
        Page {page.currentPage} of {page.lastPage}
      </span>
      
      {page.url.next && (
        <a href={page.url.next} class="pagination-link">
          Next →
        </a>
      )}
    </div>
  </nav>
</BaseLayout>

<style>
  .blog-header {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  .blog-header h1 {
    font-size: 3rem;
    margin-bottom: 0.5rem;
  }
  
  .blog-subtitle {
    font-size: 1.2rem;
    color: #666;
  }
  
  .posts-grid {
    display: grid;
    gap: 2rem;
    margin-bottom: 3rem;
  }
  
  .post-card {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 1.5rem;
    padding: 1.5rem;
    background: #f9f9f9;
    border-radius: 12px;
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .post-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .post-image-link {
    display: block;
  }
  
  .post-image {
    width: 100%;
    height: 220px;
    object-fit: cover;
    border-radius: 8px;
  }
  
  .post-card-content {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }
  
  .post-card-title {
    margin: 0 0 0.5rem;
    font-size: 1.5rem;
    line-height: 1.3;
  }

  .post-date {
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
    display: block;
    }
  
  .post-card-title a {
    color: #333;
    text-decoration: none;
  }
  
  .post-card-title a:hover {
    color: #667eea;
  }
  
  .post-categories {
    font-size: 0.9rem;
    margin-bottom: 0.75rem;
    line-height: 1.6;
  }
  
  .category-label {
    color: #666;
    margin-right: 0.25rem;
  }
  
  .category-link {
    color: #667eea;
    text-decoration: none;
    font-weight: 500;
  }
  
  .category-link:hover {
    text-decoration: underline;
  }
  
  .category-more {
    color: #999;
    font-style: italic;
  }
  
  .post-excerpt {
    color: #555;
    line-height: 1.6;
    margin: 0;
  }
  
  .pagination {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    padding: 2rem 0;
    border-top: 2px solid #e5e5e5;
  }
  
  .pagination-info {
    color: #666;
    font-size: 0.95rem;
  }
  
  .pagination-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
  }
  
  .pagination-link {
    padding: 0.75rem 1.5rem;
    background: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 600;
    transition: background 0.2s;
  }
  
  .pagination-link:hover {
    background: #5568d3;
  }
  
  .pagination-current {
    padding: 0.75rem 1rem;
    font-weight: 600;
    color: #333;
  }
  
  @media (max-width: 768px) {
    .blog-header h1 {
      font-size: 2.5rem;
    }
    
    .post-card {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .post-image {
      height: 200px;
    }
    
    .post-card-title {
      font-size: 1.3rem;
    }
    
    .pagination-controls {
      flex-wrap: wrap;
      justify-content: center;
    }
  }
</style>